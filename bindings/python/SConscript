#
# This file is part of Mapnik (c++ mapping toolkit)
#
# Copyright (C) 2006 Artem Pavlenko, Jean-Francois Doyon
#
# Mapnik is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# $Id$

import glob
import re
import os

Import('env')
Import('conf')

prefix = env['PREFIX']
install_prefix = env['DESTDIR'] + '/' + prefix

if env['CAIRO'] and conf.CheckPKGConfig('0.15.0') and conf.CheckPKG('pycairo'):
    env.ParseConfig('pkg-config --cflags pycairo')
    env.Append(CXXFLAGS = '-DHAVE_PYCAIRO');

linkflags = ''
libraries = ['mapnik','png','jpeg']
libraries.append('boost_python%s' % env['BOOST_APPEND'])

if env['PLATFORM'] == 'Darwin':
    libraries.append('icuuc')
    libraries.append('icudata')
    libraries.append('boost_regex%s' % env['BOOST_APPEND'])
    if env['THREADING'] == 'multi':
        libraries.append('boost_thread%s' % env['BOOST_APPEND'])
    if '-DHAVE_PYCAIRO' in env['CXXFLAGS']:
        libraries.append([lib for lib in env['LIBS'] if lib.startswith('cairo')])
    linkflags = '-F/ -framework Python'

headers = [env['PYTHON_INCLUDES']] + env['CPPPATH']

paths = """
mapniklibpath = '%s'
"""

paths += "inputpluginspath = mapniklibpath + '/input'\n"

if env['SYSTEM_FONTS']:
    paths += "fontscollectionpath = '%s'" % env['SYSTEM_FONTS']
else:
    paths += "fontscollectionpath = mapniklibpath + '/fonts'"


# write out the location of the 'mapniklibpath' into a python file
# so that the python module can locate it at runtime
exp =  r"%s{2,}" % os.sep
# Note: we use prefix here not install_prefix since install_prefix is for package building
# and we intend for python to look to the standard prefix location to find the fonts and plugins
mapnik_lib_path  = re.sub(exp,os.sep, prefix + '/' + env['LIBDIR_SCHEMA'] + env['LIB_DIR_NAME'])
file('mapnik/paths.py','w').write(paths % (mapnik_lib_path))

# install the core mapnik python files, including '__init__.py' and 'paths.py'
init_files = glob.glob('mapnik/*.py')
init_module = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik', init_files)
env.Alias(target='install', source=init_module)

# install the ogcserver module code
ogcserver_files = glob.glob('mapnik/ogcserver/*.py')
ogcserver_module = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik/ogcserver', ogcserver_files)
env.Alias(target='install', source=ogcserver_module)


# install the shared object beside the module directory
_mapnik = env.LoadableModule('_mapnik', glob.glob('*.cpp'), LIBS=libraries, LDMODULEPREFIX='', LDMODULESUFFIX='.so', CPPPATH=headers,LINKFLAGS=linkflags)
pymapniklib = env.Install(env['PYTHON_INSTALL_LOCATION'] + '/mapnik',_mapnik)
env.Alias(target='install',source=pymapniklib)